/*
 * main_space_invaders.c
 *
 *  Created on: Oct 5, 2017
 *      Author: superman
 */

#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xparameters.h"
#include "xaxivdma.h"
#include "xio.h"
#include "time.h"
#include "unistd.h"

#include "draw.h"

#define MOVE_TANK_RIGHT_KEY '6' //Make tank move to the right by pressing number 6
#define MOVE_TANK_LEFT_KEY '4' //Make tank move to the left by pressing number 4
#define ERODE_BUNKER '7' //Make the bunker Erode by pushing button 7
#define KILL_ALIEN '2' //kill and alien with button number 2
#define UPDATE_ALIEN_POSITION '8' //Update all aliens by pushing button number 8
#define UPDATE_ALL_BULLETS '9' //update all of the bullets on the screen by pushing button number 9
#define FIRE_TANK_BULLET '5' //Fire a bullet from the tank by pushing 5
#define FIRE_RANDOM_ALIEN_BULLET '3' //Fire a bullet from the aliens by pushing 3

#define MAX_NUMBER_OF_ALIENS_IN_A_ROW 11
#define TOTAL_NUMBER_OF_BLOCKS 12
#define NUMBER_OF_DIFFERENT_ALIEN_BULLET_TYPES 2
#define MAX_NUMBER_OF_ALIEN_BULLETS 4
#define ALIEN_NULL -1

#define RAND_MAX 65535 //this is a max for the random
#define RESET 0// Reset is 0

#define BLANK_BLOCK_1 9 //This is the blank block for the bunkers
#define BLANK_BLOCK_2 10 //This is the blank block for the bunkers

#define NUMBER_LENGTH 2 //The length of a number is 2
#define NUMBER_LENGTH_ONE 1 //the length of a number is 1

void print(char *str); //This is a void print function

#define FRAME_BUFFER_0_ADDR 0xC1000000  // Starting location in DDR where we will store the images that we display.

int32_t getAlienNumber(){ //the get alien function
	char number[NUMBER_LENGTH]; //This is an array with the length of 2
	int32_t final_number; //This is the final number
	scanf("%ld", &final_number);
	return final_number; //We return the final number
}

int getBunkerNumber(){ //This is to get the bunker number
	char number[NUMBER_LENGTH_ONE]; //We have an array of length 1
	int final_number; //We have a final number
	scanf("%d", &final_number);
	return final_number; //We return the final number
}

int main()
{
	init_platform();                   // Necessary for all programs.
	int Status;                        // Keep track of success/failure of system function calls.
	XAxiVdma videoDMAController;
	// There are 3 steps to initializing the vdma driver and IP.
	// Step 1: lookup the memory structure that is used to access the vdma driver.
	XAxiVdma_Config * VideoDMAConfig = XAxiVdma_LookupConfig(XPAR_AXI_VDMA_0_DEVICE_ID);
	// Step 2: Initialize the memory structure and the hardware.
	if(XST_FAILURE == XAxiVdma_CfgInitialize(&videoDMAController, VideoDMAConfig,	XPAR_AXI_VDMA_0_BASEADDR)) {
		xil_printf("VideoDMA Did not initialize.\r\n");
	}
	// Step 3: (optional) set the frame store number.
	if(XST_FAILURE ==  XAxiVdma_SetFrmStore(&videoDMAController, 2, XAXIVDMA_READ)) {
		xil_printf("Set Frame Store Failed.");
	}
	// Initialization is complete at this point.

	// Setup the frame counter. We want two read frames. We don't need any write frames but the
	// function generates an error if you set the write frame count to 0. We set it to 2
	// but ignore it because we don't need a write channel at all.
	XAxiVdma_FrameCounter myFrameConfig;
	myFrameConfig.ReadFrameCount = 2;
	myFrameConfig.ReadDelayTimerCount = 10;
	myFrameConfig.WriteFrameCount =2;
	myFrameConfig.WriteDelayTimerCount = 10;
	Status = XAxiVdma_SetFrameCounter(&videoDMAController, &myFrameConfig);
	if (Status != XST_SUCCESS) {
		xil_printf("Set frame counter failed %d\r\n", Status);
		if(Status == XST_VDMA_MISMATCH_ERROR)
			xil_printf("DMA Mismatch Error\r\n");
	}
	// Now we tell the driver about the geometry of our frame buffer and a few other things.
	// Our image is 480 x 640.
	XAxiVdma_DmaSetup myFrameBuffer;
	myFrameBuffer.VertSizeInput = 480;    // 480 vertical pixels.
	myFrameBuffer.HoriSizeInput = 640*4;  // 640 horizontal (32-bit pixels).
	myFrameBuffer.Stride = 640*4;         // Dont' worry about the rest of the values.
	myFrameBuffer.FrameDelay = 0;
	myFrameBuffer.EnableCircularBuf=1;
	myFrameBuffer.EnableSync = 0;
	myFrameBuffer.PointNum = 0;
	myFrameBuffer.EnableFrameCounter = 0;
	myFrameBuffer.FixedFrameStoreAddr = 0;
	if(XST_FAILURE == XAxiVdma_DmaConfig(&videoDMAController, XAXIVDMA_READ, &myFrameBuffer)) {
		xil_printf("DMA Config Failed\r\n");
	}
	// We need to give the frame buffer pointers to the memory that it will use. This memory
	// is where you will write your video data. The vdma IP/driver then streams it to the HDMI
	// IP.
	myFrameBuffer.FrameStoreStartAddr[0] = FRAME_BUFFER_0_ADDR;
	myFrameBuffer.FrameStoreStartAddr[1] = FRAME_BUFFER_0_ADDR + 4*640*480;

	if(XST_FAILURE == XAxiVdma_DmaSetBufferAddr(&videoDMAController, XAXIVDMA_READ,
			myFrameBuffer.FrameStoreStartAddr)) {
		xil_printf("DMA Set Address Failed Failed\r\n");
	}
	// Print a sanity message if you get this far.
	xil_printf("Woohoo! I made it through initialization.\n\r");
	// Now, let's get ready to start displaying some stuff on the screen.
	// The variables framePointer and framePointer1 are just pointers to the base address
	// of frame 0 and frame 1.
	unsigned int * framePointer0 = draw_start_screen();//(unsigned int *) FRAME_BUFFER_0_ADDR;

	// This tells the HDMI controller the resolution of your display (there must be a better way to do this).
	XIo_Out32(XPAR_AXI_HDMI_0_BASEADDR, 640*480);

	// Start the DMA for the read channel only.
	if(XST_FAILURE == XAxiVdma_DmaStart(&videoDMAController, XAXIVDMA_READ)){
		xil_printf("DMA START FAILED\r\n");
	}
	int frameIndex = 0;
	// We have two frames, let's park on frame 0. Use frameIndex to index them.
	// Note that you have to start the DMA process before parking on a frame.
	if (XST_FAILURE == XAxiVdma_StartParking(&videoDMAController, frameIndex,  XAXIVDMA_READ)) {
		xil_printf("vdma parking failed\n\r");
	}
	// Oscillate between frame 0 and frame 1.
	uint16_t random_counter = RESET;
	while (1) {
		static uint8_t bullet_tank_count = RESET; //Keep track of the number of tank bullets
		static uint8_t alien_bullet_count = RESET; //Keep track of the number of alien bullets
		uint8_t my_alien_bullet_count = RESET; //Keep track of the number of alien bullets
		char input = getchar(); //Get the character
		random_counter++; //Increment the random counter
		if(random_counter == RAND_MAX) //Check to see if the random counter is at the max
		{
			random_counter = RESET; //Reset the random counter when it hits the max.
		}

		bullet_tank_count = updateTankBullet(); //Set the bullet count to the update tank bullet function
		my_alien_bullet_count = updateAlienBullet(); //Set the alien bullet count to the update alien bullet function

		switch(input){
		case MOVE_TANK_RIGHT_KEY:
			xil_printf("MOVE RIGHT\n\r");
			drawTank(TANK_RIGHT);// Call the draw tank function with move right
			break;
		case MOVE_TANK_LEFT_KEY:
			xil_printf("MOVE LEFT\n\r");
			drawTank(TANK_LEFT); //Call the draw tank function with move left
			break;
		case FIRE_TANK_BULLET:
			if(bullet_tank_count == RESET){ //If the bullet has not been fired before
				xil_printf("FIRE_TANK_BULLET\n\r");
				bullet_tank_count++; //Increment the bullet count
			}
			else{
				xil_printf("ONLY ONE BULLET AT A TIME\n\r");
			}
			drawTankBullet(); //Call the draw tank function
			break;
		default:
			//xil_printf("WE PUSHED A DIFFERENT KEY\n\r");
			break;
		}



		/* This is the main for lab 3
 		 switch(input){
  		 case MOVE_TANK_RIGHT_KEY:
  			 xil_printf("MOVE RIGHT\n\r");
  			 drawTank(TANK_RIGHT);// Call the draw tank function with move right
  			 break;
  		 case MOVE_TANK_LEFT_KEY:
  			 xil_printf("MOVE LEFT\n\r");
  			 drawTank(TANK_LEFT); //Call the draw tank function with move left
  			 break;
  		 case ERODE_BUNKER:
  			 xil_printf("ERODE_BUNKER\n\r");
  			 uint8_t bunker_number, block_number; //Variables for bunker and block number
  			 bunker_number = getBunkerNumber(); //We are supposed to choose the bunker we want to erode
  			 srand(random_counter); //This allows us to give srand a seed
  			 block_number = rand() % TOTAL_NUMBER_OF_BLOCKS; //This will give us a random block to disintegrate

  			 if(block_number == BLANK_BLOCK_1){ //If the block is a 9
  				 block_number--; //make the block an 8
  			 }
  			 else if(block_number == BLANK_BLOCK_2){ //If the block is a 10
  				 block_number++; //Make the block 11
  			 }
  			 erodeBunker(bunker_number, block_number); //Call erode bunker with the bunker and block numbers
  			 break;
  		 case FIRE_TANK_BULLET:
  			 if(bullet_tank_count == RESET){ //If the bullet has not been fired before
  	  			 xil_printf("FIRE_TANK_BULLET\n\r");
  	  			 bullet_tank_count++; //Increment the bullet count
  			 }
  			 else{
  	  			 xil_printf("ONLY ONE BULLET AT A TIME\n\r");
  			 }
  			 drawTankBullet(); //Call the draw tank function
  			 break;
  		 case FIRE_RANDOM_ALIEN_BULLET:
  			 if(my_alien_bullet_count <= MAX_NUMBER_OF_ALIEN_BULLETS){ //If there are less than 4 bullets on the screen
				alien_bullet_count++; //Increment alien bullet count
  				xil_printf("FIRE_RANDOM_ALIEN_BULLET\n\r");
  			 }
  			 else{
  				xil_printf("ONLY FOUR ALIEN BULLETS AT A TIME\n\r");
  			 }
	  		 uint8_t alienColumn, alienBulletType; //Alien number and bullet type
	    	 random_counter++;//Increment the random counter
  			 srand(random_counter); //Pass the random counter as the seed to srand
  			 alienBulletType = rand()%NUMBER_OF_DIFFERENT_ALIEN_BULLET_TYPES; //Set the bullet type
  			 alienColumn = (rand()%MAX_NUMBER_OF_ALIENS_IN_A_ROW);//Set the column alien number
  			 while(getMyAlienNumber(alienColumn) == ALIEN_NULL){ //If the column is null
  	  			 alienColumn = (rand()%MAX_NUMBER_OF_ALIENS_IN_A_ROW);//Keep trying for a new column
  			 }
  			 drawAlienBullet(alienColumn, alienBulletType); //Call draw alien bullet with the column and bullet type
  			 break;
  		 case UPDATE_ALL_BULLETS:
  			 bullet_tank_count = updateTankBullet(); //Set the bullet count to the update tank bullet function
  			 my_alien_bullet_count = updateAlienBullet(); //Set the alien bullet count to the update alien bullet function
  			 xil_printf("UPDATE_ALL_BULLETS and %d \n\r", my_alien_bullet_count);
  			 break;
  		 case KILL_ALIEN:
  			 xil_printf("KILL_ALIEN\n\r");
  			 //uint8_t alien_number = getAlienNumber(); //Get the alien number to kill
  			 //char my_alien = getchar();
  			 //if(isDigit(my_alien)){
  			 uint8_t alien_number = 0; //Get the alien number to kill


  			 char c1 = getchar();
  			 while(isdigit(c1))
  			 {
  				alien_number = (alien_number * 10) + (c1 - '0');
  				c1 = getchar();
  			 }
  			 xil_printf("KILL_ALIEN %d \n\r", alien_number);
  			 killAlien(alien_number); //Kill the alien given
  			 //}
  			 break;
  		 case UPDATE_ALIEN_POSITION:
  			 //xil_printf("UPDATE_ALIEN_POSITION\n\r");
  			 drawAlienBlock(); //Draw the block of aliens
  			 break;
  		 default:
  			 //xil_printf("WE PUSHED A DIFFERENT KEY\n\r");
  			 break;
  		 }



		 */
		//frameIndex = (frameIndex + 1) % 2;  // Alternate between frame 0 and frame 1.
		if (XST_FAILURE == XAxiVdma_StartParking(&videoDMAController, frameIndex,  XAXIVDMA_READ)) {
			xil_printf("vdma parking failed\n\r");
		}
	}
	cleanup_platform();

	return 0;
}
