/*
 * draw_alien_bullet.c
 *
 *  Created on: Oct 21, 2017
 *      Author: superman
 */

#include <stdbool.h>
#include "draw_alien_bullet.h"
#include "draw_aliens.h"
#include "images.h"
#include "draw_bunker.h"
#include "draw_tank.h"

#define ALIEN_BULLET_GROUND_LEVEL 450 //This is the ground level of the game

#define ALIEN_BULLET_1 0 //Alien bullet number 1
#define ALIEN_BULLET_2 1 //Alien bullet number 2
#define ALIEN_BULLET_3 2 //Alien bullet number 3
#define ALIEN_BULLET_4 3 //Alien bullet number 4

#define BULLET_TYPE_CROSS 0 //Bullet type number 1
#define BULLET_TYPE_ZIGZAG 1 //Bullet type number 2
#define BULLET_MAX_COUNT 4 //Maximum number of alien bullets
#define BULLET_MIDDLE_ALIEN 12 //The middle of an alien

#define CROSS_1 1 //Bullet cross number 1
#define CROSS_2 2 //Bullet cross number 2
#define CROSS_3 3 //Bullet cross number 3
#define NUMBER_OF_CROSS_TYPES 3 //3 types of cross bullets
#define NUMBER_OF_ZIGZAG_TYPES 2 //2 types of cross bullets
#define ZIGZAG_1 1 //Bullet ZIGZAG number 1
#define ZIGZAG_2 2 //Bullet ZIGZAG number 2

#define ONE_PIXEL 2
#define BUNKER_EROSIONS 3

static point_t alienBulletPosition1; //Variable to keep track of alien bullet 1 position
static point_t alienBulletPosition2; //Variable to keep track of alien bullet 2 position
static point_t alienBulletPosition3; //Variable to keep track of alien bullet 3 position
static point_t alienBulletPosition4; //Variable to keep track of alien bullet 4 position
bool alien_cross_bullet_drawn = false;
bool alien_zigzag_bullet_drawn = false;

#define ALIEN_NULL -1

static uint8_t alienBulletCount = 0;

uint8_t alien_bullet_array[BULLET_MAX_COUNT] = {0, 0, 0, 0}; //Default is not shot
int8_t alien_bullet_type[BULLET_MAX_COUNT] = {-1, -1, -1, -1}; //default type is cross
uint8_t alien_cross[BULLET_MAX_COUNT] = {1, 1, 1, 1}; //default is cross_1
uint8_t alien_zigzag[BULLET_MAX_COUNT] = {1, 1, 1, 1}; //Default is zigzag_1

extern unsigned int * frame_pointer;

uint8_t rogueBullet;

point_t rogueBulletPosition;

void setRogueBulletPosition(point_t value){
	rogueBulletPosition = value;
}

point_t getRogueBulletPosition(){
	return rogueBulletPosition;
}

void setRogueBullet(bool value){
	rogueBullet = value;
}

bool getRogueBullet(){
	return rogueBullet;
}

uint8_t rogueAlienNumber;

void setRogueAlienNumber(point_t value){
	rogueAlienNumber = calculateAlienNumber(value);
}

uint8_t getRogueAlienNumber(){
	return rogueAlienNumber;
}


uint8_t getAlienBulletCount(){ //This returns the number of aliens on the screen
	return alienBulletCount;
}

void setAlienBulletPosition(point_t val, uint8_t bullet_number){ //Set the alien bullet position given a point and a number
	if(bullet_number == ALIEN_BULLET_1){ //Number 1
		alienBulletPosition1.x = val.x; //X position
		alienBulletPosition1.y = val.y; //Y position
	}
	else if(bullet_number == ALIEN_BULLET_2){ //Number 2
		alienBulletPosition2.x = val.x; //X position
		alienBulletPosition2.y = val.y; //Y position
	}
	else if(bullet_number == ALIEN_BULLET_3){ //Number 3
		alienBulletPosition3.x = val.x; //X position
		alienBulletPosition3.y = val.y; //Y position
	}
	else if(bullet_number == ALIEN_BULLET_4){ //Number 4
		alienBulletPosition4.x = val.x; //X position
		alienBulletPosition4.y = val.y; //Y position
	}
}

point_t getAlienBulletPosition(uint8_t bullet_number){ //Get the position for the alien bullet when given a bullet
	if(bullet_number == ALIEN_BULLET_1){ //Number 1 position
		return alienBulletPosition1;
	}
	else if(bullet_number == ALIEN_BULLET_2){ //Number 2 position
		return alienBulletPosition2;
	}
	else if(bullet_number == ALIEN_BULLET_3){ //Number 3 position
		return alienBulletPosition3;
	}
	else{ //Number 4 position
		return alienBulletPosition4;
	}
}

void drawAlienBullet(uint8_t alienNumber, uint8_t type){
	uint8_t width;
	int8_t alien_shooter = getMyAlienNumber(alienNumber); //Get the alien that shoots
	if(alien_shooter != ALIEN_NULL){ //If the column that the alien shooter is in is not null
		point_t updateBullet;
		point_t alienPos = calculateAlienPosition(alien_shooter); //Find the position for the alien that shoots
		updateBullet.x = alienPos.x + (BULLET_MIDDLE_ALIEN - ONE_PIXEL); //Move the x to the middle of the alien
		updateBullet.y = alienPos.y + ALIEN_HEIGHT; //Move the y to the bottom of the alien
		uint8_t i, num;
		uint8_t stop = false; //Stop is initialized to false, this is to help us break out of the loops
		for(num = 0; num < BULLET_MAX_COUNT && !stop; num++){ //Stop must not be true to continue
			if(alien_bullet_type[num] == ALIEN_NULL){ //If the bullet is null, not been shot
				i = num; //Keep track of the bullet number
				alien_bullet_type[i] = type; //set the type
				stop = true; //Break out
			}
		}
		if(type == BULLET_TYPE_CROSS){ //If type is a cross
			if(alienBulletCount < BULLET_MAX_COUNT){ //we have less than 4 bullets
				setAlienBulletPosition(updateBullet, i); //Set the bullet position
				width = ALIEN_CROSS_BULLET_WORD_WIDTH; //Find width
				drawBullet(alien_cross_bullet_1, updateBullet, width); //Draw the bullet
				alienBulletCount++; //Increment the alien bullets on the screen
			}
		}
		else {
			if(alienBulletCount < BULLET_MAX_COUNT){//we have less than 4 bullets
				setAlienBulletPosition(updateBullet, i); //Set the bullet position
				width = ALIEN_ZIGZAG_BULLET_WORD_WIDTH; //Find width
				drawBullet(alien_zig_zag_bullet_1, updateBullet, width); //Draw the bullet
				alienBulletCount++; //Increment the alien bullets on the screen
			}
		}
	}
}
bool cross = false;
uint8_t rogue_cross = 1;
uint8_t rogue_zigzag = 1;
uint8_t rogueBulletType = false;;

void drawRogueBullet(){
	uint8_t width = 100;
	/*
	point_t position_of_alien = calculateAlienPosition(getRogueAlienNumber());
	position_of_alien.y -= ALIEN_HEIGHT; //We are now above the alien
	position_of_alien.y -= ALIEN_BULLET_HEIGHT; //This should be the top of the alien bullet
	setRogueBulletPosition(position_of_alien);
	 */
	point_t pos = getRogueBulletPosition();
	const uint32_t* alien_bullet;
	//rogueBulletType = cross;
	//cross = !cross;
	if(rogueBulletType == BULLET_TYPE_CROSS){ //If type is a cross
		width = ALIEN_CROSS_BULLET_WORD_WIDTH; //Find width
		alien_bullet = alien_cross_bullet_1;
	}
	uint8_t line, pixel;
	for(line = 0; line < ALIEN_BULLET_HEIGHT; line++){ //For height
		for(pixel = 0; pixel < width; pixel++){ //For width
			if((alien_bullet[line] & (SHIFT<<(width-SHIFT-pixel)))){ //If pixel is a 1
				frame_pointer[(line + pos.y) * SCREEN_WIDTH + (pixel + pos.x)] = RED; //Set to red
			}
		}
	}
	//xil_printf("we have drawn a rogue bullet\n\r");
}


void drawBullet(const uint32_t* alien_cross_bullet, point_t updateBullet, uint8_t width){
	uint8_t line, pixel;
	for(line = 0; line < ALIEN_BULLET_HEIGHT; line++){ //For height
		for(pixel = 0; pixel < width; pixel++){ //For width
			if((alien_cross_bullet[line] & (SHIFT<<(width-SHIFT-pixel)))){ //If pixel is a 1
				frame_pointer[(line + updateBullet.y) * SCREEN_WIDTH + (pixel + updateBullet.x)] = RED; //Set to red
			}
		}
	}
	//xil_printf("we have drawn a bullet at x: %d and y: %d!\n\r", updateBullet.x, updateBullet.y);
}

void eraseBullets(const uint32_t * alien_cross_bullet, point_t position, uint8_t width){
	uint8_t line, pixel;
	for(line = 0; line < ALIEN_BULLET_HEIGHT; line++){ //For height
		for(pixel = 0; pixel < width; pixel++){ //For width
			if((alien_cross_bullet[line] & (SHIFT<<(width-SHIFT-pixel)))){ //Pixel is a 1
				frame_pointer[(line + position.y) * SCREEN_WIDTH + (pixel + ONE_PIXEL + position.x)] = BLACK; //Set to black
				frame_pointer[(line + position.y) * SCREEN_WIDTH + (pixel + position.x)] = BLACK; //Set to black
				frame_pointer[(line + position.y) * SCREEN_WIDTH + (pixel + position.x - ONE_PIXEL)] = BLACK; //Set to black
			}
		}
	}
}

void eraseAllAlienBullets(){
	uint8_t number;
	uint8_t width;
	for(number = 0; number < BULLET_MAX_COUNT; number++){ //For each bullet
		point_t position = getAlienBulletPosition(number); //Get the position
		if(alien_bullet_type[number] == BULLET_TYPE_CROSS){ //If type is a cross
			width = ALIEN_CROSS_BULLET_WORD_WIDTH; //Set the width
			if(alien_cross[number] == CROSS_1){ //Cross 1
				alien_bullet_type[number] = ALIEN_NULL; //Set the type to -1
				alienBulletCount--; //Decrement the amount of alien bullets
				eraseBullets(alien_cross_bullet_1, position, width); //Erase cross 1
				eraseBullets(alien_cross_bullet_2, position, width); //Erase cross 2
				eraseBullets(alien_cross_bullet_3, position, width); //Erase cross 3

			}
			else if(alien_cross[number] == CROSS_2){
				alien_bullet_type[number] = ALIEN_NULL; //Set the type to -1
				alienBulletCount--; //Decrement the amount of alien bullets
				eraseBullets(alien_cross_bullet_1, position, width); //Erase cross 1
				eraseBullets(alien_cross_bullet_2, position, width); //Erase cross 2
				eraseBullets(alien_cross_bullet_3, position, width); //Erase cross 3

			}
			else{
				alien_bullet_type[number] = ALIEN_NULL; //Set the type to -1
				alienBulletCount--; //Decrement the amount of alien bullets
				eraseBullets(alien_cross_bullet_1, position, width); //Erase cross 1
				eraseBullets(alien_cross_bullet_2, position, width); //Erase cross 2
				eraseBullets(alien_cross_bullet_3, position, width); //Erase cross 3
			}
		}
		else if(alien_bullet_type[number] == BULLET_TYPE_ZIGZAG){ //Type is a zigzag
			width = ALIEN_ZIGZAG_BULLET_WORD_WIDTH; //Set the width
			if(alien_zigzag[number] == ZIGZAG_1){ //Zigzag 1
				alien_bullet_type[number] = ALIEN_NULL; //Set the type to -1
				alienBulletCount--; //Decrement the amount of alien bullets
				eraseBullets(alien_zig_zag_bullet_2, position, width); //Erase zigzag 2
				eraseBullets(alien_zig_zag_bullet_1, position, width); //Erase zigzag 1
			}
			else{
				alien_bullet_type[number] = ALIEN_NULL; //Set the type to -1 or turn off the bullet
				alienBulletCount--; //Decrement the amount of the aliens
				eraseBullets(alien_zig_zag_bullet_2, position, width); //Erase zigzag 1
				eraseBullets(alien_zig_zag_bullet_1, position, width); //Erase zigzag 2
			}
		}
	}
}

uint8_t alienMayErodeBunker(uint8_t bunkerNumber, uint8_t blockNumber, uint8_t pixel, uint8_t line, point_t new_bullet_position){
	if(getErosionStage(bunkerNumber, blockNumber) != BUNKER_EROSIONS){ //If the erosion stage is not a 3
		setDidAlienKillBunkerFlag(true); //Alien killed a bunker
		point_t bunkerPosition;
		bunkerPosition.x = pixel + new_bullet_position.x; //change the bunker position
		bunkerPosition.y = line + new_bullet_position.y;
		setShotBunkerPosition(bunkerPosition); //Set the shot bunker position
		return true;
	}
	else{
		return false;
	}
}

uint8_t whichAlienBunkerNumber(point_t bullet, uint8_t pixel, uint8_t line, point_t new_bullet_position){
	uint8_t stop = false; //Set stop to false in order to break the loop
	uint8_t bunkerNumber = calculateBunkerNumber(bullet);
	uint8_t blockNumber = calculateBlockNumber(bunkerNumber, bullet);
	if((calculateBunkerNumber(bullet) == BUNKER1 && calculateBlockNumber(BUNKER1, bullet) != WRONG_BUNKER)
			|| (calculateBunkerNumber(bullet) == BUNKER2 && calculateBlockNumber(BUNKER2, bullet) != WRONG_BUNKER)
			|| (calculateBunkerNumber(bullet) == BUNKER3 && calculateBlockNumber(BUNKER3, bullet) != WRONG_BUNKER)
			|| (calculateBunkerNumber(bullet) == BUNKER4 && calculateBlockNumber(BUNKER4, bullet) != WRONG_BUNKER)){
		stop = alienMayErodeBunker(bunkerNumber, blockNumber, pixel, line, new_bullet_position); //Call alien erode bunker
	}
	return stop;
}

void eraseAlienBullet(const uint32_t* alien_cross_bullet, point_t bullet_pos, uint8_t width){
	uint8_t line, pixel;
	for(line = 0; line < ALIEN_BULLET_HEIGHT; line++){ //Height
		for(pixel = 0; pixel < width; pixel++){ //Width
			if((alien_cross_bullet[line] & (SHIFT<<(width-SHIFT-pixel)))){ //If pixel exists
				frame_pointer[(line + bullet_pos.y) * SCREEN_WIDTH + (pixel + bullet_pos.x)] = BLACK; //Set to black
			}
		}
	}
}

uint8_t generalUpdateBullet(const uint32_t* alien_cross_bullet, uint8_t bulletNum, uint8_t type){
	int8_t bullet_drawn = type; //Set bullet drawn to type
	point_t my_updateBullet = getAlienBulletPosition(bulletNum);
	point_t temp = my_updateBullet;
	temp.y += ALIEN_BULLET_HEIGHT; //Was 10
	setAlienBulletPosition(temp, bulletNum); //Set the bullet
	uint8_t line, pixel;
	uint8_t stop = false;
	for(line = 0; line < ALIEN_BULLET_HEIGHT; line++){ //Height
		for(pixel = 0; pixel < ALIEN_CROSS_BULLET_WORD_WIDTH; pixel++){ //Width
			if((temp.y + ALIEN_BULLET_HEIGHT) <= (GROUND_LEVEL - ALIEN_BULLET_HEIGHT) && !stop){ //If we haven't hit the green line and stop is not true
				point_t bullet;
				bullet.x = pixel + temp.x;
				bullet.y = line + temp.y;
				if(calculateTank(bullet) != RESET){ // Did we hit the tank
					stop = true;
				}
				if(calculateBunkerNumber(bullet) != WRONG_BUNKER){ //Did we hit a bunker
					stop = whichAlienBunkerNumber(bullet, pixel, line, temp);
				}
				if(frame_pointer[(my_updateBullet.y + line) * SCREEN_WIDTH + (pixel + my_updateBullet.x)] == RED){//Black out the last shape
					frame_pointer[(my_updateBullet.y + line) * SCREEN_WIDTH + (pixel + my_updateBullet.x)] = BLACK; //Set to black
				}
				if((alien_cross_bullet[line] & (SHIFT<<(ALIEN_CROSS_BULLET_WORD_WIDTH-SHIFT-pixel)))){ //If pixel is a 1
					frame_pointer[(line + temp.y) * SCREEN_WIDTH + (pixel + temp.x)] = RED; //Set to red
				}
				if(stop){
					eraseAlienBullet(alien_cross_bullet, temp, ALIEN_CROSS_BULLET_WORD_WIDTH); //Erase the bullet
					bullet_drawn = ALIEN_NULL; //Bullet set to false
					alien_bullet_type[bulletNum] = ALIEN_NULL; //Turn off
				}
			}
			else{
				if(frame_pointer[(my_updateBullet.y + line) * SCREEN_WIDTH + (pixel + my_updateBullet.x)] == RED){//Black out the last shape
					frame_pointer[(my_updateBullet.y + line) * SCREEN_WIDTH + (pixel + my_updateBullet.x)] = BLACK; //Set to black
					bullet_drawn = ALIEN_NULL;
					alien_bullet_type[bulletNum] = ALIEN_NULL;
				}
			}
			if(stop){
				frame_pointer[(my_updateBullet.y + line) * SCREEN_WIDTH + (pixel + my_updateBullet.x)] = BLACK; //Set to black
				bullet_drawn = ALIEN_NULL; //Bullet set to false
				alien_bullet_type[bulletNum] = ALIEN_NULL; //Turn off
			}
		}
	}
	return bullet_drawn; //give bullet drawn
}

bool alienHitsAliens(int8_t pixel, uint8_t line, point_t new_alien_bullet_position, point_t alien){
	xil_printf("how many times do we come into here should be only 4\n\r");
	setDidTankKillAlienFlag(true); //Set flag to true
	point_t deadAlienPosition;
	deadAlienPosition.x = pixel + new_alien_bullet_position.x;
	deadAlienPosition.y = line + new_alien_bullet_position.y;
	setDeadAlienPosition(deadAlienPosition); //Set dead alien position
	drawRogueBullet();
	return true;
}


void updateRogueBullet(const uint32_t* alien_cross_bullet, uint8_t type){
	point_t my_updateBullet = getRogueBulletPosition();
	point_t temp = my_updateBullet;
	temp.y -= ALIEN_BULLET_HEIGHT; //Was 10
	setRogueBulletPosition(temp);
	point_t new_rogue_bullet_position = getRogueBulletPosition();
	uint8_t line, pixel;
	uint8_t stop = false;
	for(line = 0; line < ALIEN_BULLET_HEIGHT; line++){ //Height
		for(pixel = 0; pixel < ALIEN_CROSS_BULLET_WORD_WIDTH; pixel++){ //Width
			if(((temp.y - ALIEN_BULLET_HEIGHT) > ELEVEN_GAME_PIXELS) && !stop){ //If we haven't hit the green line and stop is not true
				point_t bullet;
				bullet.x = pixel + temp.x;
				bullet.y = line + temp.y;
				if(calculateAlienNumber(bullet) != WRONG_ALIEN){
					stop = alienHitsAliens(pixel, line, new_rogue_bullet_position, bullet);
				}
				if(frame_pointer[(my_updateBullet.y + line) * SCREEN_WIDTH + (pixel + my_updateBullet.x)] == RED){//Black out the last shape
					frame_pointer[(my_updateBullet.y + line) * SCREEN_WIDTH + (pixel + my_updateBullet.x)] = BLACK; //Set to black
				}
				if((alien_cross_bullet[line] & (SHIFT<<(ALIEN_CROSS_BULLET_WORD_WIDTH-SHIFT-pixel)))){ //If pixel is a 1
					frame_pointer[(line + temp.y) * SCREEN_WIDTH + (pixel + temp.x)] = RED; //Set to red
				}
				if(stop){
					eraseAlienBullet(alien_cross_bullet, temp, ALIEN_CROSS_BULLET_WORD_WIDTH); //Erase the bullet
					//bullet_drawn = ALIEN_NULL; //Bullet set to false
					//rogueBulletType = ALIEN_NULL; //Turn off
				}
			}
			else{
				setDidTankKillAlienFlag(true); //Set flag to true
				point_t deadAlienPosition;
				deadAlienPosition = calculateAlienPosition(getRogueAlienNumber());
				//deadAlienPosition.x = pixel + new_alien_bullet_position.x;
				//deadAlienPosition.y = line + new_alien_bullet_position.y;
				setDeadAlienPosition(deadAlienPosition); //Set dead alien position
				if(frame_pointer[(my_updateBullet.y + line) * SCREEN_WIDTH + (pixel + my_updateBullet.x)] == RED){//Black out the last shape
					frame_pointer[(my_updateBullet.y + line) * SCREEN_WIDTH + (pixel + my_updateBullet.x)] = BLACK; //Set to black
					//bullet_drawn = ALIEN_NULL;
					//rogueBulletType = ALIEN_NULL;
				}
			}
			if(stop){
				frame_pointer[(my_updateBullet.y + line) * SCREEN_WIDTH + (pixel + my_updateBullet.x)] = BLACK; //Set to black
				//bullet_drawn = ALIEN_NULL; //Bullet set to false
				//rogueBulletType = ALIEN_NULL; //Turn off
				setRogueBullet(false);
			}
		}
	}
}

uint8_t updateEachBullet(){ //This is cool
	uint8_t i;
	uint8_t total = false;
	for(i = 0; i < BULLET_MAX_COUNT; i++){ //For each bullet
		if(alien_bullet_type[i] == BULLET_TYPE_CROSS){ //If the type is a cross
			if(alien_cross[i] == CROSS_1){ //Cross 1
				alien_cross[i]++; //Increment the cross
				alien_bullet_type[i] = generalUpdateBullet(alien_cross_bullet_2, i, BULLET_TYPE_CROSS); //Update the bullet
				if(alien_bullet_type[i] == ALIEN_NULL){
					alienBulletCount--; //Decrement the bullet count
				}
				total += alien_cross_bullet_drawn; //Increment the count for bullets
			}
			else if(alien_cross[i] == CROSS_2){ //Cross 2
				alien_cross[i]++; //Increment the cross
				alien_bullet_type[i] = generalUpdateBullet(alien_cross_bullet_3, i, BULLET_TYPE_CROSS); //Update the bullet
				total += alien_cross_bullet_drawn; //Increment the bullet count
				if(alien_bullet_type[i] == ALIEN_NULL){ //If we turned off
					alienBulletCount--; //Decrement the amount of bullets
				}
			}
			else{
				alien_cross[i] = CROSS_1; //Cross 1
				alien_bullet_type[i] = generalUpdateBullet(alien_cross_bullet_1, i, BULLET_TYPE_CROSS); //Update the bullet
				total += alien_cross_bullet_drawn; //Increment the bullet count
				if(alien_bullet_type[i] == ALIEN_NULL){ //If we turned off
					alienBulletCount--; //Decrement the amount of bullets
				}
			}
		}
		else if(alien_bullet_type[i] == BULLET_TYPE_ZIGZAG){ //If the type is a zigzag
			if(alien_zigzag[i] == ZIGZAG_1){ //Zigzag 1
				alien_zigzag[i]++; //Increment zigzag
				alien_bullet_type[i] = generalUpdateBullet(alien_zig_zag_bullet_2, i, BULLET_TYPE_ZIGZAG); //Update the bullet
				total += alien_zigzag_bullet_drawn; //Increment the bullet count
				if(alien_bullet_type[i] == ALIEN_NULL){ //If we turned off
					alienBulletCount--; //Decrement the amount of bullets
				}
			}
			else{
				alien_zigzag[i] = ZIGZAG_1;
				alien_bullet_type[i] = generalUpdateBullet(alien_zig_zag_bullet_1, i, BULLET_TYPE_ZIGZAG); //Update the bullet
				total += alien_zigzag_bullet_drawn; //Increment the bullet count
				if(alien_bullet_type[i] == ALIEN_NULL){ //If we turned off
					alienBulletCount--; //Decrement the amount of bullets
				}
			}
		}
	}
	/*
	bool cross = true;
	uint8_t rogue_cross = 1;
	uint8_t rogue_zigzag = 1;
	uint8_t rogueBulletType;
	 */
	if(getRogueBullet()){
		if(rogueBulletType == BULLET_TYPE_CROSS){ //If the type is a cross
			if(rogue_cross  == CROSS_1){
				rogue_cross++;
				updateRogueBullet(alien_cross_bullet_2, BULLET_TYPE_CROSS); //Update the bullet
			}
			else if(rogue_cross  == CROSS_2){
				rogue_cross++;
				updateRogueBullet(alien_cross_bullet_3, BULLET_TYPE_CROSS); //Update the bullet
			}
			else{
				rogue_cross = CROSS_1;
				updateRogueBullet(alien_cross_bullet_1, BULLET_TYPE_CROSS); //Update the bullet
			}
		}
	}
	return alienBulletCount; //Return the number of bullets
}
