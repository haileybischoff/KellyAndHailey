/*
 * main_space_invaders.c
 *
 *  Created on: Oct 5, 2017
 *      Author: superman
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>
#include "xac97_l.h"
#include "platform.h"
#include "xparameters.h"
#include "xaxivdma.h"
#include "xio.h"
#include "time.h"
#include "unistd.h"
#include "xintc_l.h"        // Provides handy macros for the interrupt controller.
#include "xgpio.h"          // Provides access to PB GPIO driver.
#include "game.h"
#include "draw.h"
#include "alien_bullet_state_machine.h"
#include "aliens_move_state_machine.h"
#include "tank_bullet_state_machine.h"
#include "tank_move_state_machine.h"
#include "saucer_state_machine.h"
#include "pit.h"
#include "sound.h"

#define FRAME_BUFFER_0_ADDR 0xC1000000  // Starting location in DDR where we will store the images that we display.

#define TEN_TIMES_SECOND_CASE 49
#define FIFTY_TIMES_SECOND_CASE 50
#define SEVENTY_FIVE_TIMES_SECOND_CASE 51
#define ONE_TIMES_SPEED_CASE 52
#define ONE_AND_HALF_TIMES_SPEED_CASE 53
#define TWO_TIMES_SPEED_CASE 54
#define FOUR_TIMES_SPEED_CASE 55
#define TEN_TIMES_SPEED_CASE 56
#define REALLY_FAST_CASE 57
#define NORMAL_SPEED_CASE 48

bool debug = true;
uint32_t currentButtonState = 0;

/***************** INTERRUPT HANDLER STUFF *****************************/
XGpio gpPB;   // This is a handle for the push-button GPIO block.

// This is invoked each time there is a change in the button state (result of a push or a bounce).
void pb_interrupt_handler() {
	// Clear the GPIO interrupt.
	XGpio_InterruptGlobalDisable(&gpPB);                // Turn off all PB interrupts for now.
	currentButtonState = XGpio_DiscreteRead(&gpPB, 1);  // Get the current state of the buttons.

	//currentSwitchesState =

	XGpio_InterruptClear(&gpPB, 0xFFFFFFFF);            // Ack the PB interrupt.
	XGpio_InterruptGlobalEnable(&gpPB);                 // Re-enable PB interrupts.
}

void sound_interrupt_handler(){
	sound_run();
}

// Main interrupt handler, queries the interrupt controller to see what peripheral
// fired the interrupt and then dispatches the corresponding interrupt handler.
// This routine acks the interrupt at the controller level but the peripheral
// interrupt must be ack'd by the dispatched interrupt handler.
void interrupt_handler_dispatcher(void* ptr) {
	int intc_status = XIntc_GetIntrStatus(XPAR_INTC_0_BASEADDR);
	// Check the FIT interrupt first.
	if (intc_status & XPAR_PIT_0_MYINTERRUPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_PIT_0_MYINTERRUPT_MASK);
		//debugStatePrint();
		//TankBullet_tick(); -- THis doesn't work
		AlienBullet_tick();
		AlienInvaders_tick();
		TankMove_tick();
		saucerAction_tick();
		spaceInvaders_tick(); //This is where we call the tick functions
	}
	// Check the push buttons.
	if (intc_status & XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK);
		pb_interrupt_handler();
	}

	if(intc_status & XPAR_AXI_AC97_0_INTERRUPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_AXI_AC97_0_INTERRUPT_MASK);
		sound_interrupt_handler();
	}
}

int main()
{
	init_platform();
	init_pit();
	sound_init_AC_97();
	// Initialize the GPIO peripherals.
	int success;
	success = XGpio_Initialize(&gpPB, XPAR_PUSH_BUTTONS_5BITS_DEVICE_ID);



	// Set the push button peripheral to be inputs.
	XGpio_SetDataDirection(&gpPB, 1, 0x0000001F);
	// Enable the global GPIO interrupt for push buttons.
	XGpio_InterruptGlobalEnable(&gpPB);
	// Enable all interrupts in the push button peripheral.
	XGpio_InterruptEnable(&gpPB, 0xFFFFFFFF);

	microblaze_register_handler(interrupt_handler_dispatcher, NULL);
	XIntc_EnableIntr(XPAR_INTC_0_BASEADDR,
			(XPAR_PIT_0_MYINTERRUPT_MASK | XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK | XPAR_AXI_AC97_0_INTERRUPT_MASK));
	XIntc_MasterEnable(XPAR_INTC_0_BASEADDR);
	microblaze_enable_interrupts();
	//init_platform();                   // Necessary for all programs.
	int Status;                        // Keep track of success/failure of system function calls.
	XAxiVdma videoDMAController;
	// There are 3 steps to initializing the vdma driver and IP.
	// Step 1: lookup the memory structure that is used to access the vdma driver.
	XAxiVdma_Config * VideoDMAConfig = XAxiVdma_LookupConfig(XPAR_AXI_VDMA_0_DEVICE_ID);
	// Step 2: Initialize the memory structure and the hardware.
	if(XST_FAILURE == XAxiVdma_CfgInitialize(&videoDMAController, VideoDMAConfig,	XPAR_AXI_VDMA_0_BASEADDR)) {
		xil_printf("VideoDMA Did not initialize.\r\n");
	}
	// Step 3: (optional) set the frame store number.
	if(XST_FAILURE ==  XAxiVdma_SetFrmStore(&videoDMAController, 2, XAXIVDMA_READ)) {
		xil_printf("Set Frame Store Failed.");
	}
	// Initialization is complete at this point.

	// Setup the frame counter. We want two read frames. We don't need any write frames but the
	// function generates an error if you set the write frame count to 0. We set it to 2
	// but ignore it because we don't need a write channel at all.
	XAxiVdma_FrameCounter myFrameConfig;
	myFrameConfig.ReadFrameCount = 2;
	myFrameConfig.ReadDelayTimerCount = 10;
	myFrameConfig.WriteFrameCount =2;
	myFrameConfig.WriteDelayTimerCount = 10;
	Status = XAxiVdma_SetFrameCounter(&videoDMAController, &myFrameConfig);
	if (Status != XST_SUCCESS) {
		xil_printf("Set frame counter failed %d\r\n", Status);
		if(Status == XST_VDMA_MISMATCH_ERROR)
			xil_printf("DMA Mismatch Error\r\n");
	}
	// Now we tell the driver about the geometry of our frame buffer and a few other things.
	// Our image is 480 x 640.
	XAxiVdma_DmaSetup myFrameBuffer;
	myFrameBuffer.VertSizeInput = 480;    // 480 vertical pixels.
	myFrameBuffer.HoriSizeInput = 640*4;  // 640 horizontal (32-bit pixels).
	myFrameBuffer.Stride = 640*4;         // Dont' worry about the rest of the values.
	myFrameBuffer.FrameDelay = 0;
	myFrameBuffer.EnableCircularBuf=1;
	myFrameBuffer.EnableSync = 0;
	myFrameBuffer.PointNum = 0;
	myFrameBuffer.EnableFrameCounter = 0;
	myFrameBuffer.FixedFrameStoreAddr = 0;
	if(XST_FAILURE == XAxiVdma_DmaConfig(&videoDMAController, XAXIVDMA_READ, &myFrameBuffer)) {
		xil_printf("DMA Config Failed\r\n");
	}
	// We need to give the frame buffer pointers to the memory that it will use. This memory
	// is where you will write your video data. The vdma IP/driver then streams it to the HDMI
	// IP.
	myFrameBuffer.FrameStoreStartAddr[0] = FRAME_BUFFER_0_ADDR;
	myFrameBuffer.FrameStoreStartAddr[1] = FRAME_BUFFER_0_ADDR + 4*640*480;

	if(XST_FAILURE == XAxiVdma_DmaSetBufferAddr(&videoDMAController, XAXIVDMA_READ,
			myFrameBuffer.FrameStoreStartAddr)) {
		xil_printf("DMA Set Address Failed Failed\r\n");
	}
	// Print a sanity message if you get this far.
	//xil_printf("Woohoo! I made it through initialization.\n\r");
	// Now, let's get ready to start displaying some stuff on the screen.
	// The variables framePointer and framePointer1 are just pointers to the base address
	// of frame 0 and frame 1.
	unsigned int * framePointer0 = draw_start_screen();//(unsigned int *) FRAME_BUFFER_0_ADDR;

	// This tells the HDMI controller the resolution of your display (there must be a better way to do this).
	XIo_Out32(XPAR_AXI_HDMI_0_BASEADDR, 640*480);



	// Start the DMA for the read channel only.
	if(XST_FAILURE == XAxiVdma_DmaStart(&videoDMAController, XAXIVDMA_READ)){
		xil_printf("DMA START FAILED\r\n");
	}
	int frameIndex = 0;
	// We have two frames, let's park on frame 0. Use frameIndex to index them.
	// Note that you have to start the DMA process before parking on a frame.
	if (XST_FAILURE == XAxiVdma_StartParking(&videoDMAController, frameIndex,  XAXIVDMA_READ)) {
		xil_printf("vdma parking failed\n\r");
	}

	// Oscillate between frame 0 and frame 1.
	//xil_printf("Start\r\n");
	//while (1){

	/*
		downBtn = getDownBtnFlag(); //Get the down button
		if(downBtn == 1 && !down_action_taken){
			down_action_taken = true; //Set down bool to true
			turn_sound_vol_down(); //Decrement sound
		}
		else if(downBtn == 0){
			down_action_taken = false; //No action to be taken
		}
		else{
		}
		upBtn = getUpBtnFlag(); //Get the up button
		if(upBtn == 1 && !up_action_taken){
			up_action_taken = true; //Set up bool to true
			turn_sound_vol_up(); //Increment sound
		}
		else if(upBtn == 0){
			up_action_taken = false; //No action to be taken
		}
		else{
		}
	 */
	//}

	while(1){  // Program never ends.
		uint32_t switches = XIo_In32(XPAR_SWITCH_GPIO_0_BASEADDR);

		xil_printf("this is the value for switches: %d\n\r", switches);

/*
		uint32_t temp_int = 0;
		char temp_char = getchar();
		while(temp_char != '\r'){
			temp_int *= 10;
			temp_int += temp_char - '0';
			temp_char = getchar();
		}
		xil_printf("number is: %d\n\r", temp_int);
		PIT_mWriteSlaveReg1 (XPAR_PIT_0_BASEADDR, temp_int);	// 10x a second
		*/
		/*
		char input = getchar();
		if(debug) xil_printf("input is: %d\n\r", input);
		switch(input){
		case TEN_TIMES_SECOND_CASE:
			if(debug) xil_printf("you have selected a 1\n\r");
			PIT_mWriteSlaveReg1 (XPAR_PIT_0_BASEADDR, 10000000);	// 10x a second
			break;
		case FIFTY_TIMES_SECOND_CASE:
			if(debug) xil_printf("you have selected a 2\n\r");
			PIT_mWriteSlaveReg1 (XPAR_PIT_0_BASEADDR, 5000000);	// 50x a second
			break;
		case SEVENTY_FIVE_TIMES_SECOND_CASE:
			if(debug) xil_printf("you have selected a 3\n\r");
			PIT_mWriteSlaveReg1 (XPAR_PIT_0_BASEADDR, 7500000);	// 75x a second
			break;
		case ONE_TIMES_SPEED_CASE:
			if(debug) xil_printf("you have selected a 4\n\r");
			PIT_mWriteSlaveReg1 (XPAR_PIT_0_BASEADDR,  1000000); // 1x speed
			break;
		case ONE_AND_HALF_TIMES_SPEED_CASE:
			if(debug) xil_printf("you have selected a 5\n\r");
			PIT_mWriteSlaveReg1 (XPAR_PIT_0_BASEADDR,  750000);	// 1.5 speed
			break;
		case TWO_TIMES_SPEED_CASE:
			if(debug) xil_printf("you have selected a 6\n\r");
			PIT_mWriteSlaveReg1 (XPAR_PIT_0_BASEADDR, 500000);	// 2x speed
			break;
		case FOUR_TIMES_SPEED_CASE:
			if(debug) xil_printf("you have selected a 7\n\r");
			PIT_mWriteSlaveReg1 (XPAR_PIT_0_BASEADDR, 250000);	// 4x speed
			break;
		case TEN_TIMES_SPEED_CASE:
			if(debug) xil_printf("you have selected a 8\n\r");
			PIT_mWriteSlaveReg1 (XPAR_PIT_0_BASEADDR, 100000);	// 10x speed
			break;
		case REALLY_FAST_CASE:
			if(debug) xil_printf("you have selected a 9\n\r");
			PIT_mWriteSlaveReg1 (XPAR_PIT_0_BASEADDR, 10000);	// LUDICROUS SPEED
			break;
		case NORMAL_SPEED_CASE:
			if(debug) xil_printf("you have selected a 0\n\r");
			PIT_mWriteSlaveReg1 (XPAR_PIT_0_BASEADDR, 1000000);	// 100x a second NORMAL SPEED
			break;
		default:
			if(debug) xil_printf("you have not selected a number\n\r");
			break;
		}
		*/
	}

	cleanup_platform();

	return 0;
}
